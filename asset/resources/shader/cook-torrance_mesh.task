#version 450 core
#extension GL_NV_mesh_shader: require
  #extension GL_KHR_shader_subgroup_basic : require
  #extension GL_KHR_shader_subgroup_ballot : require
  #extension GL_KHR_shader_subgroup_vote : require
#extension GL_EXT_shader_explicit_arithmetic_types: require

layout(local_size_x = 32) in;

#define GROUP_SIZE 32

taskNV out Task {
    uint baseID;
    uint8_t subIDs[GROUP_SIZE];
} OUT;

struct MeshletDesc {
    uint vertexCount;
    uint primCount;
    uint vertexBegin;
    uint primBegin;
};

layout(set = 2, binding = 0) uniform MeshletCount {
    uint32_t meshletCount;
};

layout(set = 2, binding = 1) readonly buffer Meshlets {
    MeshletDesc meshlets[];
};


void main() {
    MeshletDesc desc = meshlets[gl_GlobalInvocationID.x];
    bool render = gl_GlobalInvocationID.x < meshletCount; // && !culled
    uvec4 vote = subgroupBallot(render);
    uint tasks = subgroupBallotBitCount(vote);

    if(gl_LocalInvocationID.x == 0) {
        gl_TaskCountNV = tasks;

        OUT.baseID = gl_WorkGroupID.x * GROUP_SIZE;
    }

    uint idOffset = subgroupBallotExclusiveBitCount(vote);
    if(render) {
        OUT.subIDs[idOffset] = uint8_t(gl_LocalInvocationID.x);
    }
}